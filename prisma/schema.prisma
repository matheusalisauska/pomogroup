generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  pomodoroSessions PomodoroSesssion[]
  accounts         Account[]
  pomodoros        Pomodoro[]
  SessionUser      SessionUser[]

  @@unique([email])
  @@map("user")
}

model PomodoroSesssion {
  id        String        @id @default(cuid())
  name      String
  createdBy String // User.id de quem criou
  users     SessionUser[]
  createdAt DateTime      @default(now())
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
}

//Sessão do pomodoro
model SessionUser {
  id                 String            @id @default(cuid())
  session            Session           @relation(fields: [sessionId], references: [id])
  sessionId          String
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  PomodoroSesssion   PomodoroSesssion? @relation(fields: [pomodoroSesssionId], references: [id])
  pomodoroSesssionId String?
}

model Pomodoro {
  id         String    @id @default(cuid())
  session    Session   @relation(fields: [sessionId], references: [id])
  sessionId  String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  status     String    @default("idle") // idle | running | paused | finished
  duration   Int // duração em minutos
  elapsed    Int       @default(0) // tempo já passado em segundos
  startedAt  DateTime?
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
}

model Session {
  id          String        @id
  expiresAt   DateTime
  token       String
  createdAt   DateTime
  updatedAt   DateTime
  ipAddress   String?
  userAgent   String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  SessionUser SessionUser[]
  Pomodoro    Pomodoro[]

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
