generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id
  name             String
  email            String            @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  pomodoroSessions PomodoroSession[] @relation("CreatedSessions") // Sessões criadas por este usuário
  accounts         Account[]
  pomodoros        Pomodoro[]

  // Sessão Pomodoro em que o usuário está atualmente
  currentSessionId String?
  currentSession   PomodoroSession? @relation("CurrentSession", fields: [currentSessionId], references: [id])
}

model PomodoroSession {
  id           String     @id @default(cuid())
  name         String
  createdBy    String
  creator      User       @relation("CreatedSessions", fields: [createdBy], references: [id])
  participants User[]     @relation("CurrentSession") // Usuários que estão nesta sessão
  Pomodoro     Pomodoro[]
  createdAt    DateTime   @default(now())
}

model Pomodoro {
  id                String          @id @default(cuid())
  pomodoroSessionId String
  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id])
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  status            String          @default("idle") // idle | running | paused | finished
  duration          Int // duração em minutos
  elapsed           Int             @default(0) // tempo já passado em segundos
  startedAt         DateTime?
  finishedAt        DateTime?
  createdAt         DateTime        @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
